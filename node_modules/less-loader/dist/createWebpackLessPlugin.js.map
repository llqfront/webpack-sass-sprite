{"version":3,"sources":["../src/createWebpackLessPlugin.js"],"names":["less","require","loaderUtils","pify","stringifyLoader","resolve","trailingSlash","isLessCompatible","matchMalformedModuleFilename","createWebpackLessPlugin","loaderContext","fs","bind","loadModule","readFile","WebpackFileManager","filename","currentDirectory","url","replace","moduleRequest","urlToRequest","context","resolvedFilename","then","f","addDependency","test","contents","toString","join","JSON","parse","FileManager","install","lessInstance","pluginManager","addFileManager","minVersion","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,cAAcD,QAAQ,cAAR,CAApB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;AAEA,IAAMG,kBAAkBH,QAAQI,OAAR,CAAgB,sBAAhB,CAAxB;AACA,IAAMC,gBAAgB,QAAtB;AACA,IAAMC,mBAAmB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,+BAA+B,mBAArC;;AAEA;;;;;;;AAOA,SAASC,uBAAT,CAAiCC,aAAjC,EAAgD;AAAA,MACtCC,EADsC,GAC/BD,aAD+B,CACtCC,EADsC;;AAE9C,MAAMN,UAAUF,KAAKO,cAAcL,OAAd,CAAsBO,IAAtB,CAA2BF,aAA3B,CAAL,CAAhB;AACA,MAAMG,aAAaV,KAAKO,cAAcG,UAAd,CAAyBD,IAAzB,CAA8BF,aAA9B,CAAL,CAAnB;AACA,MAAMI,WAAWX,KAAKQ,GAAGG,QAAH,CAAYF,IAAZ,CAAiBD,EAAjB,CAAL,CAAjB;;AAJ8C,MAMxCI,kBANwC;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,iCAOnC,sDAAwD;AAAE;AACjE;AACA,eAAO,IAAP;AACD;AAV2C;AAAA;AAAA,+BAYnCC,QAZmC,EAYzBC,gBAZyB,CAYR,4BAZQ,EAYsB;AAAE;AAClE,YAAMC,MAAMF,SAASG,OAAT,CAAiBX,4BAAjB,EAA+C,IAA/C,CAAZ;AACA,YAAMY,gBAAgBlB,YAAYmB,YAAZ,CAAyBH,GAAzB,CAAtB;AACA;AACA,YAAMI,UAAUL,iBAAiBE,OAAjB,CAAyBb,aAAzB,EAAwC,EAAxC,CAAhB;AACA,YAAIiB,yBAAJ;;AAEA,eAAOlB,QAAQiB,OAAR,EAAiBF,aAAjB,EACJI,IADI,CACC,UAACC,CAAD,EAAO;AACXF,6BAAmBE,CAAnB;AACAf,wBAAcgB,aAAd,CAA4BH,gBAA5B;;AAEA,cAAIhB,iBAAiBoB,IAAjB,CAAsBJ,gBAAtB,CAAJ,EAA6C;AAC3C,mBAAOT,SAASS,gBAAT,EACJC,IADI,CACC;AAAA,qBAAYI,SAASC,QAAT,CAAkB,MAAlB,CAAZ;AAAA,aADD,CAAP;AAED;;AAED,iBAAOhB,WAAW,CAACT,eAAD,EAAkBmB,gBAAlB,EAAoCO,IAApC,CAAyC,GAAzC,CAAX,EACJN,IADI,CACCO,KAAKC,KADN,CAAP;AAED,SAZI,EAaJR,IAbI,CAaC,UAACI,QAAD,EAAc;AAClB,iBAAO;AACLA,oBADK;AAELZ,sBAAUO;AAFL,WAAP;AAID,SAlBI,CAAP;AAmBD;AAtC2C;;AAAA;AAAA,IAMbvB,KAAKiC,WANQ;;AAyC9C,SAAO;AACLC,YAAQC,YAAR,EAAsBC,aAAtB,EAAqC;AACnCA,oBAAcC,cAAd,CAA6B,IAAItB,kBAAJ,EAA7B;AACD,KAHI;AAILuB,gBAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAJP,GAAP;AAMD;;AAEDC,OAAOC,OAAP,GAAiB/B,uBAAjB","file":"createWebpackLessPlugin.js","sourcesContent":["const less = require('less');\nconst loaderUtils = require('loader-utils');\nconst pify = require('pify');\n\nconst stringifyLoader = require.resolve('./stringifyLoader.js');\nconst trailingSlash = /[/\\\\]$/;\nconst isLessCompatible = /\\.(le|c)ss$/;\n// Less automatically adds a .less file extension if no extension was given.\n// This is problematic if there is a module request like @import \"~some-module\";\n// because in this case Less will call our file manager with `~some-module.less`.\n// Since dots in module names are highly discouraged, we can safely assume that\n// this is an error and we need to remove the .less extension again.\n// However, we must not match something like @import \"~some-module/file.less\";\nconst matchMalformedModuleFilename = /(~[^/\\\\]+)\\.less$/;\n\n/**\n * Creates a Less plugin that uses webpack's resolving engine that is provided by the loaderContext.\n *\n * @param {LoaderContext} loaderContext\n * @param {string=} root\n * @returns {LessPlugin}\n */\nfunction createWebpackLessPlugin(loaderContext) {\n  const { fs } = loaderContext;\n  const resolve = pify(loaderContext.resolve.bind(loaderContext));\n  const loadModule = pify(loaderContext.loadModule.bind(loaderContext));\n  const readFile = pify(fs.readFile.bind(fs));\n\n  class WebpackFileManager extends less.FileManager {\n    supports(/* filename, currentDirectory, options, environment */) { // eslint-disable-line class-methods-use-this\n      // Our WebpackFileManager handles all the files\n      return true;\n    }\n\n    loadFile(filename, currentDirectory /* , options, environment */) { // eslint-disable-line class-methods-use-this\n      const url = filename.replace(matchMalformedModuleFilename, '$1');\n      const moduleRequest = loaderUtils.urlToRequest(url);\n      // Less is giving us trailing slashes, but the context should have no trailing slash\n      const context = currentDirectory.replace(trailingSlash, '');\n      let resolvedFilename;\n\n      return resolve(context, moduleRequest)\n        .then((f) => {\n          resolvedFilename = f;\n          loaderContext.addDependency(resolvedFilename);\n\n          if (isLessCompatible.test(resolvedFilename)) {\n            return readFile(resolvedFilename)\n              .then(contents => contents.toString('utf8'));\n          }\n\n          return loadModule([stringifyLoader, resolvedFilename].join('!'))\n            .then(JSON.parse);\n        })\n        .then((contents) => {\n          return {\n            contents,\n            filename: resolvedFilename,\n          };\n        });\n    }\n  }\n\n  return {\n    install(lessInstance, pluginManager) {\n      pluginManager.addFileManager(new WebpackFileManager());\n    },\n    minVersion: [2, 1, 1],\n  };\n}\n\nmodule.exports = createWebpackLessPlugin;\n"]}