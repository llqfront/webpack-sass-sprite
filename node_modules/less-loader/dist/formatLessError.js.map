{"version":3,"sources":["../src/formatLessError.js"],"names":["os","require","getFileExcerptIfPossible","lessErr","excerpt","extract","slice","column","Math","max","shift","push","Array","join","unexpectedErr","formatLessError","err","msg","message","hideStack","EOL","charAt","toUpperCase","filename","line","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;AAEA;;;;;;;;;AASA,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AACzC,MAAI;AACF,QAAMC,UAAUD,QAAQE,OAAR,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAhB;AACA,QAAMC,SAASC,KAAKC,GAAL,CAASN,QAAQI,MAAR,GAAiB,CAA1B,EAA6B,CAA7B,CAAf;;AAEA,QAAI,OAAOH,QAAQ,CAAR,CAAP,KAAsB,WAA1B,EAAuC;AACrCA,cAAQM,KAAR;AACD;;AAEDN,YAAQO,IAAR,CAAc,GAAE,IAAIC,KAAJ,CAAUL,MAAV,EAAkBM,IAAlB,CAAuB,GAAvB,CAA4B,GAA5C;;AAEA,WAAOT,OAAP;AACD,GAXD,CAWE,OAAOU,aAAP,EAAsB;AACtB;AACA,WAAO,EAAP;AACD;AACF;;AAED;;;;;;;;;;;;;;;AAeA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAAE;AAC9B,MAAMC,MAAMD,IAAIE,OAAhB;;AAEA;AACA;AACAF,MAAIG,SAAJ,GAAgB,IAAhB;;AAEAH,MAAIE,OAAJ,GAAc,CACZlB,GAAGoB,GADS,4BAETlB,yBAAyBc,GAAzB,CAFS,IAGZC,IAAII,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BL,IAAIX,KAAJ,CAAU,CAAV,CAHlB,EAIX,YAAWU,IAAIO,QAAS,UAASP,IAAIQ,IAAK,YAAWR,IAAIT,MAAO,GAJrD,GAKZM,IALY,CAKPb,GAAGoB,GALI,CAAd;;AAOA,SAAOJ,GAAP;AACD,C,CAAC;;AAEFS,OAAOC,OAAP,GAAiBX,eAAjB","file":"formatLessError.js","sourcesContent":["const os = require('os');\n\n/**\n * Tries to get an excerpt of the file where the error happened.\n * Uses err.line and err.column.\n *\n * Returns an empty string if the excerpt could not be retrieved.\n *\n * @param {LessError} err\n * @returns {Array<string>}\n */\nfunction getFileExcerptIfPossible(lessErr) {\n  try {\n    const excerpt = lessErr.extract.slice(0, 2);\n    const column = Math.max(lessErr.column - 1, 0);\n\n    if (typeof excerpt[0] === 'undefined') {\n      excerpt.shift();\n    }\n\n    excerpt.push(`${new Array(column).join(' ')}^`);\n\n    return excerpt;\n  } catch (unexpectedErr) {\n    // If anything goes wrong here, we don't want any errors to be reported to the user\n    return [];\n  }\n}\n\n/**\n * Beautifies the error message from Less.\n *\n * @param {LessError} lessErr\n * @param {string} lessErr.type - e.g. 'Name'\n * @param {string} lessErr.message - e.g. '.undefined-mixin is undefined'\n * @param {string} lessErr.filename - e.g. '/path/to/style.less'\n * @param {number} lessErr.index - e.g. 352\n * @param {number} lessErr.line - e.g. 31\n * @param {number} lessErr.callLine - e.g. NaN\n * @param {string} lessErr.callExtract - e.g. undefined\n * @param {number} lessErr.column - e.g. 6\n * @param {Array<string>} lessErr.extract - e.g. ['    .my-style {', '      .undefined-mixin;', '      display: block;']\n * @returns {LessError}\n */\nfunction formatLessError(err) { /* eslint-disable no-param-reassign */\n  const msg = err.message;\n\n  // Instruct webpack to hide the JS stack from the console\n  // Usually you're only interested in the SASS stack in this case.\n  err.hideStack = true;\n\n  err.message = [\n    os.EOL,\n    ...getFileExcerptIfPossible(err),\n    msg.charAt(0).toUpperCase() + msg.slice(1),\n    `      in ${err.filename} (line ${err.line}, column ${err.column})`,\n  ].join(os.EOL);\n\n  return err;\n} /* eslint-enable no-param-reassign */\n\nmodule.exports = formatLessError;\n"]}